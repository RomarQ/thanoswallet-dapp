{"version":3,"file":"index.modern.js","sources":["../src/types.ts","../src/client.ts"],"sourcesContent":["export type ThanosDAppMessage = ThanosDAppRequest | ThanosDAppResponse;\n\nexport type ThanosDAppRequest =\n  | ThanosDAppPermissionRequest\n  | ThanosDAppOperationRequest;\n\nexport type ThanosDAppResponse =\n  | ThanosDAppPermissionResponse\n  | ThanosDAppOperationResponse;\n\nexport interface ThanosDAppMessageBase {\n  type: ThanosDAppMessageType;\n}\n\nexport enum ThanosDAppMessageType {\n  PermissionRequest = \"PERMISSION_REQUEST\",\n  PermissionResponse = \"PERMISSION_RESPONSE\",\n  OperationRequest = \"OPERATION_REQUEST\",\n  OperationResponse = \"OPERATION_RESPONSE\",\n}\n\n/**\n * Messages\n */\n\nexport interface ThanosDAppPermissionRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.PermissionRequest;\n  network: ThanosDAppNetwork;\n  appMeta: ThanosDAppMetadata;\n  force?: boolean;\n}\n\nexport interface ThanosDAppPermissionResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.PermissionResponse;\n  pkh: string;\n  rpc: string;\n}\n\nexport interface ThanosDAppOperationRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.OperationRequest;\n  sourcePkh: string;\n  opParams: any[];\n}\n\nexport interface ThanosDAppOperationResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.OperationResponse;\n  opHash: string;\n}\n\n/**\n * Errors\n */\nexport enum ThanosDAppErrorType {\n  NotGranted = \"NOT_GRANTED\",\n  NotFound = \"NOT_FOUND\",\n  InvalidParams = \"INVALID_PARAMS\",\n}\n\n/**\n * Misc\n */\n\nexport type ThanosDAppNetwork = \"mainnet\" | \"carthagenet\";\n\nexport interface ThanosDAppMetadata {\n  name: string;\n}\n\nexport interface ThanosPageMessage {\n  type: ThanosPageMessageType;\n  payload: any;\n  reqId?: string | number;\n}\n\nexport enum ThanosPageMessageType {\n  Request = \"THANOS_PAGE_REQUEST\",\n  Response = \"THANOS_PAGE_RESPONSE\",\n  ErrorResponse = \"THANOS_PAGE_ERROR_RESPONSE\",\n}\n","import { nanoid } from \"nanoid\";\nimport {\n  ThanosPageMessageType,\n  ThanosPageMessage,\n  ThanosDAppMessageType,\n  ThanosDAppRequest,\n  ThanosDAppResponse,\n  ThanosDAppErrorType,\n  ThanosDAppNetwork,\n  ThanosDAppMetadata,\n} from \"./types\";\n\nexport function isAvailable() {\n  return new Promise<boolean>((resolve) => {\n    const handleMessage = (evt: MessageEvent) => {\n      if (\n        evt.source === window &&\n        evt.data?.type === ThanosPageMessageType.Response &&\n        evt.data?.payload === \"PONG\"\n      ) {\n        done(true);\n      }\n    };\n\n    const done = (result: boolean) => {\n      resolve(result);\n      window.removeEventListener(\"message\", handleMessage);\n      clearTimeout(t);\n    };\n\n    send({\n      type: ThanosPageMessageType.Request,\n      payload: \"PING\",\n    });\n    window.addEventListener(\"message\", handleMessage);\n    const t = setTimeout(() => done(false), 100);\n  });\n}\n\nexport function onAvailabilityChange(callback: (available: boolean) => void) {\n  let t: any;\n  let currentStatus = false;\n  const check = async (attempt = 0) => {\n    const initial = attempt < 5;\n    const available = await isAvailable();\n    if (currentStatus !== available) {\n      callback(available);\n      currentStatus = available;\n    }\n    t = setTimeout(\n      check,\n      available ? 10_000 : !initial ? 5_000 : 250,\n      initial ? attempt + 1 : attempt\n    );\n  };\n  check();\n  return () => clearTimeout(t);\n}\n\nexport async function requestPermission(\n  network: ThanosDAppNetwork,\n  appMeta: ThanosDAppMetadata,\n  force: boolean\n) {\n  const res = await request({\n    type: ThanosDAppMessageType.PermissionRequest,\n    network,\n    appMeta,\n    force,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.PermissionResponse);\n  return { pkh: res.pkh, rpc: res.rpc };\n}\n\nexport async function requestOperation(sourcePkh: string, opParams: any) {\n  const res = await request({\n    type: ThanosDAppMessageType.OperationRequest,\n    sourcePkh,\n    opParams,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.OperationResponse);\n  return res.opHash;\n}\n\nfunction request(payload: ThanosDAppRequest) {\n  return new Promise<ThanosDAppResponse>((resolve, reject) => {\n    const reqId = nanoid();\n    const handleMessage = (evt: MessageEvent) => {\n      const res = evt.data as ThanosPageMessage;\n      switch (true) {\n        case evt.source !== window || res?.reqId !== reqId:\n          return;\n\n        case res?.type === ThanosPageMessageType.Response:\n          resolve(res.payload);\n          window.removeEventListener(\"message\", handleMessage);\n          break;\n\n        case res?.type === ThanosPageMessageType.ErrorResponse:\n          reject(createError(res.payload));\n          window.removeEventListener(\"message\", handleMessage);\n          break;\n      }\n    };\n\n    send({\n      type: ThanosPageMessageType.Request,\n      payload,\n      reqId,\n    });\n\n    window.addEventListener(\"message\", handleMessage);\n  });\n}\n\nfunction createError(payload: any) {\n  switch (payload) {\n    case ThanosDAppErrorType.NotGranted:\n      return new NotGrantedThanosWalletError();\n\n    case ThanosDAppErrorType.NotFound:\n      return new NotFoundThanosWalletError();\n\n    case ThanosDAppErrorType.InvalidParams:\n      return new InvalidParamsThanosWalletError();\n\n    default:\n      return new ThanosWalletError();\n  }\n}\n\nfunction assertResponse(condition: any): asserts condition {\n  if (!condition) {\n    throw new Error(\"Invalid response recieved\");\n  }\n}\n\nfunction send(msg: ThanosPageMessage) {\n  window.postMessage(msg, \"*\");\n}\n\nexport class ThanosWalletError implements Error {\n  name = \"ThanosWalletError\";\n  message = \"An unknown error occured. Please try again or report it\";\n}\n\nexport class NotConnectedThanosWalletError extends ThanosWalletError {\n  name = \"ThanosWalletNotConnected\";\n  message =\n    \"You need to connect ThanosWallet by calling thanosWallet.connect() first\";\n}\n\nexport class NotGrantedThanosWalletError extends ThanosWalletError {\n  name = \"NotGrantedThanosWalletError\";\n  message = \"Permission Not Granted\";\n}\n\nexport class NotFoundThanosWalletError extends ThanosWalletError {\n  name = \"NotFoundThanosWalletError\";\n  message = \"Account Not Found. Try connect again\";\n}\n\nexport class InvalidParamsThanosWalletError extends ThanosWalletError {\n  name = \"InvalidParamsThanosWalletError\";\n  message = \"Some of the parameters you provided are invalid\";\n}\n"],"names":["ThanosDAppMessageType","ThanosDAppErrorType","ThanosPageMessageType","isAvailable","Promise","resolve","handleMessage","evt","source","window","data","type","Response","payload","done","result","removeEventListener","clearTimeout","t","send","Request","addEventListener","setTimeout","onAvailabilityChange","callback","currentStatus","check","async","attempt","initial","available","requestPermission","network","appMeta","force","res","request","PermissionRequest","assertResponse","PermissionResponse","pkh","rpc","requestOperation","sourcePkh","opParams","OperationRequest","OperationResponse","opHash","reject","reqId","nanoid","ErrorResponse","NotGranted","NotGrantedThanosWalletError","NotFound","NotFoundThanosWalletError","InvalidParams","InvalidParamsThanosWalletError","ThanosWalletError","createError","condition","Error","msg","postMessage","constructor","this","NotConnectedThanosWalletError"],"mappings":"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"}