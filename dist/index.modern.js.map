{"version":3,"file":"index.modern.js","sources":["../src/types.ts","../src/client.ts","../src/taquito-wallet.ts"],"sourcesContent":["export type ThanosDAppMessage = ThanosDAppRequest | ThanosDAppResponse;\n\nexport type ThanosDAppRequest =\n  | ThanosDAppPermissionRequest\n  | ThanosDAppOperationRequest\n  | ThanosDAppSignRequest\n  | ThanosDAppBroadcastRequest;\n\nexport type ThanosDAppResponse =\n  | ThanosDAppPermissionResponse\n  | ThanosDAppOperationResponse\n  | ThanosDAppSignResponse\n  | ThanosDAppBroadcastResponse;\n\nexport interface ThanosDAppMessageBase {\n  type: ThanosDAppMessageType;\n}\n\nexport enum ThanosDAppMessageType {\n  PermissionRequest = \"PERMISSION_REQUEST\",\n  PermissionResponse = \"PERMISSION_RESPONSE\",\n  OperationRequest = \"OPERATION_REQUEST\",\n  OperationResponse = \"OPERATION_RESPONSE\",\n  SignRequest = \"SIGN_REQUEST\",\n  SignResponse = \"SIGN_RESPONSE\",\n  BroadcastRequest = \"BROADCAST_REQUEST\",\n  BroadcastResponse = \"BROADCAST_RESPONSE\",\n}\n\n/**\n * Messages\n */\n\nexport interface ThanosDAppPermissionRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.PermissionRequest;\n  network: ThanosDAppNetwork;\n  appMeta: ThanosDAppMetadata;\n  force?: boolean;\n}\n\nexport interface ThanosDAppPermissionResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.PermissionResponse;\n  pkh: string;\n  rpc: string;\n}\n\nexport interface ThanosDAppOperationRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.OperationRequest;\n  sourcePkh: string;\n  opParams: any[];\n}\n\nexport interface ThanosDAppOperationResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.OperationResponse;\n  opHash: string;\n}\n\nexport interface ThanosDAppSignRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.SignRequest;\n  sourcePkh: string;\n  payload: string;\n}\n\nexport interface ThanosDAppSignResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.SignResponse;\n  signature: string;\n}\n\nexport interface ThanosDAppBroadcastRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.BroadcastRequest;\n  signedOpBytes: string;\n}\n\nexport interface ThanosDAppBroadcastResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.BroadcastResponse;\n  opHash: string;\n}\n\n/**\n * Errors\n */\nexport enum ThanosDAppErrorType {\n  NotGranted = \"NOT_GRANTED\",\n  NotFound = \"NOT_FOUND\",\n  InvalidParams = \"INVALID_PARAMS\",\n}\n\n/**\n * Misc\n */\n\nexport type ThanosDAppNetwork =\n  | \"mainnet\"\n  | \"carthagenet\"\n  | \"labnet\"\n  | \"sandbox\"\n  | { name: string; rpc: string };\n\nexport interface ThanosDAppMetadata {\n  name: string;\n}\n\nexport interface ThanosPageMessage {\n  type: ThanosPageMessageType;\n  payload: any;\n  reqId?: string | number;\n}\n\nexport enum ThanosPageMessageType {\n  Request = \"THANOS_PAGE_REQUEST\",\n  Response = \"THANOS_PAGE_RESPONSE\",\n  ErrorResponse = \"THANOS_PAGE_ERROR_RESPONSE\",\n}\n","import { nanoid } from \"nanoid\";\nimport {\n  ThanosPageMessageType,\n  ThanosPageMessage,\n  ThanosDAppMessageType,\n  ThanosDAppRequest,\n  ThanosDAppResponse,\n  ThanosDAppErrorType,\n  ThanosDAppNetwork,\n  ThanosDAppMetadata,\n} from \"./types\";\n\nexport function isAvailable() {\n  return new Promise<boolean>((resolve) => {\n    const handleMessage = (evt: MessageEvent) => {\n      if (\n        evt.source === window &&\n        evt.data?.type === ThanosPageMessageType.Response &&\n        evt.data?.payload === \"PONG\"\n      ) {\n        done(true);\n      }\n    };\n\n    const done = (result: boolean) => {\n      resolve(result);\n      window.removeEventListener(\"message\", handleMessage);\n      clearTimeout(t);\n    };\n\n    send({\n      type: ThanosPageMessageType.Request,\n      payload: \"PING\",\n    });\n    window.addEventListener(\"message\", handleMessage);\n    const t = setTimeout(() => done(false), 500);\n  });\n}\n\nexport function onAvailabilityChange(callback: (available: boolean) => void) {\n  let t: any;\n  let currentStatus = false;\n  const check = async (attempt = 0) => {\n    const initial = attempt < 5;\n    const available = await isAvailable();\n    if (currentStatus !== available) {\n      callback(available);\n      currentStatus = available;\n    }\n    t = setTimeout(\n      check,\n      available ? 10_000 : !initial ? 5_000 : 0,\n      initial ? attempt + 1 : attempt\n    );\n  };\n  check();\n  return () => clearTimeout(t);\n}\n\nexport async function requestPermission(\n  network: ThanosDAppNetwork,\n  appMeta: ThanosDAppMetadata,\n  force: boolean\n) {\n  const res = await request({\n    type: ThanosDAppMessageType.PermissionRequest,\n    network,\n    appMeta,\n    force,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.PermissionResponse);\n  return { pkh: res.pkh, rpc: res.rpc };\n}\n\nexport async function requestOperation(sourcePkh: string, opParams: any) {\n  const res = await request({\n    type: ThanosDAppMessageType.OperationRequest,\n    sourcePkh,\n    opParams,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.OperationResponse);\n  return res.opHash;\n}\n\nexport async function requestSign(sourcePkh: string, payload: string) {\n  const res = await request({\n    type: ThanosDAppMessageType.SignRequest,\n    sourcePkh,\n    payload,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.SignResponse);\n  return res.signature;\n}\n\nexport async function requestBroadcast(signedOpBytes: string) {\n  const res = await request({\n    type: ThanosDAppMessageType.BroadcastRequest,\n    signedOpBytes,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.BroadcastResponse);\n  return res.opHash;\n}\n\nfunction request(payload: ThanosDAppRequest) {\n  return new Promise<ThanosDAppResponse>((resolve, reject) => {\n    const reqId = nanoid();\n    const handleMessage = (evt: MessageEvent) => {\n      const res = evt.data as ThanosPageMessage;\n      switch (true) {\n        case evt.source !== window || res?.reqId !== reqId:\n          return;\n\n        case res?.type === ThanosPageMessageType.Response:\n          resolve(res.payload);\n          window.removeEventListener(\"message\", handleMessage);\n          break;\n\n        case res?.type === ThanosPageMessageType.ErrorResponse:\n          reject(createError(res.payload));\n          window.removeEventListener(\"message\", handleMessage);\n          break;\n      }\n    };\n\n    send({\n      type: ThanosPageMessageType.Request,\n      payload,\n      reqId,\n    });\n\n    window.addEventListener(\"message\", handleMessage);\n  });\n}\n\nfunction createError(payload: any) {\n  switch (true) {\n    case payload === ThanosDAppErrorType.NotGranted:\n      return new NotGrantedThanosWalletError();\n\n    case payload === ThanosDAppErrorType.NotFound:\n      return new NotFoundThanosWalletError();\n\n    case payload === ThanosDAppErrorType.InvalidParams:\n      return new InvalidParamsThanosWalletError();\n\n    case payload?.startsWith(\"__tezos__\"):\n      return new Error(payload.replace(\"__tezos__\", \"\"));\n\n    default:\n      return new ThanosWalletError();\n  }\n}\n\nfunction assertResponse(condition: any): asserts condition {\n  if (!condition) {\n    throw new Error(\"Invalid response recieved\");\n  }\n}\n\nfunction send(msg: ThanosPageMessage) {\n  window.postMessage(msg, \"*\");\n}\n\nexport class ThanosWalletError implements Error {\n  name = \"ThanosWalletError\";\n  message = \"An unknown error occured. Please try again or report it\";\n}\n\nexport class NotGrantedThanosWalletError extends ThanosWalletError {\n  name = \"NotGrantedThanosWalletError\";\n  message = \"Permission Not Granted\";\n}\n\nexport class NotFoundThanosWalletError extends ThanosWalletError {\n  name = \"NotFoundThanosWalletError\";\n  message = \"Account Not Found. Try connect again\";\n}\n\nexport class InvalidParamsThanosWalletError extends ThanosWalletError {\n  name = \"InvalidParamsThanosWalletError\";\n  message = \"Some of the parameters you provided are invalid\";\n}\n","import {\n  TezosToolkit,\n  WalletProvider,\n  createOriginationOperation,\n  createSetDelegateOperation,\n  createTransferOperation,\n  WalletDelegateParams,\n  WalletOriginateParams,\n  WalletTransferParams,\n} from \"@taquito/taquito\";\n\nimport {\n  isAvailable,\n  onAvailabilityChange,\n  requestPermission,\n  requestOperation,\n  requestSign,\n  requestBroadcast,\n  ThanosWalletError,\n} from \"./client\";\n\nimport { ThanosDAppNetwork } from \"./types\";\n\nexport class ThanosWallet implements WalletProvider {\n  static isAvailable = isAvailable;\n  static onAvailabilityChange = onAvailabilityChange;\n\n  private pkh?: string;\n  public rpc?: string;\n\n  constructor(private appName: string) {}\n\n  get connected() {\n    return Boolean(this.pkh);\n  }\n\n  toTezos() {\n    assertConnected(this.pkh);\n    const tezos = new TezosToolkit();\n    tezos.setProvider({ wallet: this, rpc: this.rpc });\n    return tezos;\n  }\n\n  async connect(network: ThanosDAppNetwork, opts = { forcePermission: false }) {\n    const { pkh, rpc } = await requestPermission(\n      network,\n      { name: this.appName },\n      opts.forcePermission\n    );\n    this.pkh = pkh;\n    this.rpc = rpc;\n  }\n\n  async getPKH() {\n    assertConnected(this.pkh);\n    return this.pkh;\n  }\n\n  async mapTransferParamsToWalletParams(params: WalletTransferParams) {\n    return createTransferOperation(params);\n  }\n\n  async mapOriginateParamsToWalletParams(params: WalletOriginateParams) {\n    return createOriginationOperation(params as any);\n  }\n\n  async mapDelegateParamsToWalletParams(params: WalletDelegateParams) {\n    return createSetDelegateOperation(params as any);\n  }\n\n  async sendOperations(opParams: any[]) {\n    assertConnected(this.pkh);\n    return requestOperation(this.pkh, opParams.map(formatOpParams));\n  }\n\n  async sign(payload: string) {\n    assertConnected(this.pkh);\n    return requestSign(this.pkh, payload);\n  }\n\n  async broadcast(signedOpBytes: string) {\n    assertConnected(this.pkh);\n    return requestBroadcast(signedOpBytes);\n  }\n}\n\nexport class NotConnectedThanosWalletError extends ThanosWalletError {\n  name = \"ThanosWalletNotConnected\";\n  message =\n    \"You need to connect ThanosWallet by calling thanosWallet.connect() first\";\n}\n\nfunction assertConnected(pkh?: string): asserts pkh {\n  if (!pkh) {\n    throw new NotConnectedThanosWalletError();\n  }\n}\n\nfunction formatOpParams(op: any) {\n  const { fee, gas_limit, storage_limit, ...rest } = op;\n  if (op.kind === \"transaction\") {\n    const { destination, amount, parameters, ...txRest } = rest;\n    return {\n      ...txRest,\n      to: destination,\n      amount: +amount,\n      mutez: true,\n      parameter: parameters,\n    };\n  }\n  return rest;\n}\n"],"names":["ThanosDAppMessageType","ThanosDAppErrorType","ThanosPageMessageType","isAvailable","Promise","resolve","handleMessage","evt","source","window","data","type","Response","payload","done","result","removeEventListener","clearTimeout","t","send","Request","addEventListener","setTimeout","onAvailabilityChange","callback","currentStatus","check","async","attempt","initial","available","requestPermission","network","appMeta","force","res","request","PermissionRequest","assertResponse","PermissionResponse","pkh","rpc","requestOperation","sourcePkh","opParams","OperationRequest","OperationResponse","opHash","requestSign","SignRequest","SignResponse","signature","requestBroadcast","signedOpBytes","BroadcastRequest","BroadcastResponse","reject","reqId","nanoid","ErrorResponse","NotGranted","NotGrantedThanosWalletError","NotFound","NotFoundThanosWalletError","InvalidParams","InvalidParamsThanosWalletError","startsWith","Error","replace","ThanosWalletError","createError","condition","msg","postMessage","constructor","this","ThanosWallet","appName","connected","Boolean","toTezos","assertConnected","tezos","TezosToolkit","setProvider","wallet","[object Object]","opts","forcePermission","name","params","createTransferOperation","createOriginationOperation","createSetDelegateOperation","map","formatOpParams","NotConnectedThanosWalletError","op","rest","kind","destination","amount","parameters","txRest","to","mutez","parameter"],"mappings":"6KAkBYA,IAAAA,EA+DAC,EA2BAC,WChGIC,IACd,WAAWC,QAAkBC,IAC3B,MAAMC,EAAiBC,YAEnBA,EAAIC,SAAWC,mBACfF,EAAIG,2BAAMC,QAAST,EAAsBU,UACnB,oBAAtBL,EAAIG,2BAAMG,UAEVC,GAAK,IAIHA,EAAQC,IACZV,EAAQU,GACRN,OAAOO,oBAAoB,UAAWV,GACtCW,aAAaC,IAGfC,EAAK,CACHR,KAAMT,EAAsBkB,QAC5BP,QAAS,SAEXJ,OAAOY,iBAAiB,UAAWf,GACnC,MAAMY,EAAII,WAAW,IAAMR,GAAK,GAAQ,OAI5C,SAAgBS,EAAqBC,GACnC,IAAIN,EACAO,GAAgB,EACpB,MAAMC,EAAQC,MAAOC,EAAU,KAC7B,MAAMC,EAAUD,EAAU,EACpBE,QAAkB3B,IACpBsB,IAAkBK,IACpBN,EAASM,GACTL,EAAgBK,GAElBZ,EAAII,WACFI,EACAI,EAAY,IAAUD,EAAkB,EAAR,IAChCA,EAAUD,EAAU,EAAIA,IAI5B,OADAF,IACO,IAAMT,aAAaC,GAG5BS,eAAsBI,EACpBC,EACAC,EACAC,GAEA,MAAMC,QAAYC,EAAQ,CACxBzB,KAAMX,EAAsBqC,kBAC5BL,QAAAA,EACAC,QAAAA,EACAC,MAAAA,IAGF,OADAI,EAAeH,EAAIxB,OAASX,EAAsBuC,oBAC3C,CAAEC,IAAKL,EAAIK,IAAKC,IAAKN,EAAIM,KAGlCd,eAAsBe,EAAiBC,EAAmBC,GACxD,MAAMT,QAAYC,EAAQ,CACxBzB,KAAMX,EAAsB6C,iBAC5BF,UAAAA,EACAC,SAAAA,IAGF,OADAN,EAAeH,EAAIxB,OAASX,EAAsB8C,mBAC3CX,EAAIY,OAGbpB,eAAsBqB,EAAYL,EAAmB9B,GACnD,MAAMsB,QAAYC,EAAQ,CACxBzB,KAAMX,EAAsBiD,YAC5BN,UAAAA,EACA9B,QAAAA,IAGF,OADAyB,EAAeH,EAAIxB,OAASX,EAAsBkD,cAC3Cf,EAAIgB,UAGbxB,eAAsByB,EAAiBC,GACrC,MAAMlB,QAAYC,EAAQ,CACxBzB,KAAMX,EAAsBsD,iBAC5BD,cAAAA,IAGF,OADAf,EAAeH,EAAIxB,OAASX,EAAsBuD,mBAC3CpB,EAAIY,OAGb,SAASX,EAAQvB,GACf,WAAWT,QAA4B,CAACC,EAASmD,KAC/C,MAAMC,EAAQC,IACRpD,EAAiBC,IACrB,MAAM4B,EAAM5B,EAAIG,KAChB,QAAQ,GACN,KAAKH,EAAIC,SAAWC,SAAU0B,MAAAA,SAAAA,EAAKsB,SAAUA,EAC3C,OAEF,KAAKtB,MAAAA,SAAAA,EAAKxB,QAAST,EAAsBU,SACvCP,EAAQ8B,EAAItB,SACZJ,OAAOO,oBAAoB,UAAWV,GACtC,MAEF,KAAK6B,MAAAA,SAAAA,EAAKxB,QAAST,EAAsByD,cACvCH,EAgBV,SAAqB3C,GACnB,QAAQ,GACN,KAAKA,IAAYZ,EAAoB2D,WACnC,WAAWC,EAEb,KAAKhD,IAAYZ,EAAoB6D,SACnC,WAAWC,EAEb,KAAKlD,IAAYZ,EAAoB+D,cACnC,WAAWC,EAEb,KAAKpD,MAAAA,SAAAA,EAASqD,WAAW,aACvB,WAAWC,MAAMtD,EAAQuD,QAAQ,YAAa,KAEhD,QACE,WAAWC,GA/BAC,CAAYnC,EAAItB,UACvBJ,OAAOO,oBAAoB,UAAWV,KAK5Ca,EAAK,CACHR,KAAMT,EAAsBkB,QAC5BP,QAAAA,EACA4C,MAAAA,IAGFhD,OAAOY,iBAAiB,UAAWf,KAuBvC,SAASgC,EAAeiC,GACtB,IAAKA,EACH,UAAUJ,MAAM,6BAIpB,SAAShD,EAAKqD,GACZ/D,OAAOgE,YAAYD,EAAK,MD9I1B,SAAYxE,GACVA,yCACAA,2CACAA,uCACAA,yCACAA,6BACAA,+BACAA,uCACAA,yCARF,CAAYA,IAAAA,OA+DZ,SAAYC,GACVA,2BACAA,uBACAA,iCAHF,CAAYA,IAAAA,OA2BZ,SAAYC,GACVA,gCACAA,kCACAA,6CAHF,CAAYA,IAAAA,OCuDZ,MAAamE,EAAbK,cACEC,UAAO,oBACPA,aAAU,2DAGZ,MAAad,UAAoCQ,EAAjDK,kCACEC,UAAO,8BACPA,aAAU,0BAGZ,MAAaZ,UAAkCM,EAA/CK,kCACEC,UAAO,4BACPA,aAAU,wCAGZ,MAAaV,UAAuCI,EAApDK,kCACEC,UAAO,iCACPA,aAAU,yDC7JCC,EAOXF,YAAoBG,GAAAF,aAAAE,EAEpBC,gBACE,OAAOC,QAAQJ,KAAKnC,KAGtBwC,UACEC,EAAgBN,KAAKnC,KACrB,MAAM0C,EAAQ,IAAIC,EAElB,OADAD,EAAME,YAAY,CAAEC,OAAQV,KAAMlC,IAAKkC,KAAKlC,MACrCyC,EAGTI,cAActD,EAA4BuD,EAAO,CAAEC,iBAAiB,IAClE,MAAMhD,IAAEA,EAAFC,IAAOA,SAAcV,EACzBC,EACA,CAAEyD,KAAMd,KAAKE,SACbU,EAAKC,iBAEPb,KAAKnC,IAAMA,EACXmC,KAAKlC,IAAMA,EAGb6C,eAEE,OADAL,EAAgBN,KAAKnC,UACTA,IAGd8C,sCAAsCI,GACpC,OAAOC,EAAwBD,GAGjCJ,uCAAuCI,GACrC,OAAOE,EAA2BF,GAGpCJ,sCAAsCI,GACpC,OAAOG,EAA2BH,GAGpCJ,qBAAqB1C,GAEnB,OADAqC,EAAgBN,KAAKnC,KACdE,EAAiBiC,KAAKnC,IAAKI,EAASkD,IAAIC,IAGjDT,WAAWzE,GAET,OADAoE,EAAgBN,KAAKnC,KACdQ,EAAY2B,KAAKnC,IAAK3B,GAG/ByE,gBAAgBjC,GAEd,OADA4B,EAAgBN,KAAKnC,KACdY,EAAiBC,IA1DnBuB,cAAczE,EACdyE,uBAAuBrD,EA6DhC,MAAayE,UAAsC3B,EAAnDK,kCACEC,UAAO,2BACPA,aACE,4EAGJ,SAASM,EAAgBzC,GACvB,IAAKA,EACH,UAAUwD,EAId,SAASD,EAAeE,GACtB,SAA0CC,GAASD,EACnD,GAAgB,gBAAZA,EAAGE,KAAwB,CAC7B,MAAMC,YAAEA,EAAFC,OAAeA,EAAfC,WAAuBA,KAAeC,GAAWL,EACvD,MAAO,IACFK,EACHC,GAAIJ,EACJC,QAASA,EACTI,OAAO,EACPC,UAAWJ,GAGf,OAAOJ"}