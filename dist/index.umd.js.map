{"version":3,"file":"index.umd.js","sources":["../src/types.ts","../src/client.ts","../src/taquito-wallet.ts"],"sourcesContent":["export type ThanosDAppMessage = ThanosDAppRequest | ThanosDAppResponse;\n\nexport type ThanosDAppRequest =\n  | ThanosDAppPermissionRequest\n  | ThanosDAppOperationRequest\n  | ThanosDAppSignRequest\n  | ThanosDAppBroadcastRequest;\n\nexport type ThanosDAppResponse =\n  | ThanosDAppPermissionResponse\n  | ThanosDAppOperationResponse\n  | ThanosDAppSignResponse\n  | ThanosDAppBroadcastResponse;\n\nexport interface ThanosDAppMessageBase {\n  type: ThanosDAppMessageType;\n}\n\nexport enum ThanosDAppMessageType {\n  PermissionRequest = \"PERMISSION_REQUEST\",\n  PermissionResponse = \"PERMISSION_RESPONSE\",\n  OperationRequest = \"OPERATION_REQUEST\",\n  OperationResponse = \"OPERATION_RESPONSE\",\n  SignRequest = \"SIGN_REQUEST\",\n  SignResponse = \"SIGN_RESPONSE\",\n  BroadcastRequest = \"BROADCAST_REQUEST\",\n  BroadcastResponse = \"BROADCAST_RESPONSE\",\n}\n\n/**\n * Messages\n */\n\nexport interface ThanosDAppPermissionRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.PermissionRequest;\n  network: ThanosDAppNetwork;\n  appMeta: ThanosDAppMetadata;\n  force?: boolean;\n}\n\nexport interface ThanosDAppPermissionResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.PermissionResponse;\n  pkh: string;\n  rpc: string;\n}\n\nexport interface ThanosDAppOperationRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.OperationRequest;\n  sourcePkh: string;\n  opParams: any[];\n}\n\nexport interface ThanosDAppOperationResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.OperationResponse;\n  opHash: string;\n}\n\nexport interface ThanosDAppSignRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.SignRequest;\n  sourcePkh: string;\n  payload: string;\n}\n\nexport interface ThanosDAppSignResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.SignResponse;\n  signature: string;\n}\n\nexport interface ThanosDAppBroadcastRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.BroadcastRequest;\n  signedOpBytes: string;\n}\n\nexport interface ThanosDAppBroadcastResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.BroadcastResponse;\n  opHash: string;\n}\n\n/**\n * Errors\n */\nexport enum ThanosDAppErrorType {\n  NotGranted = \"NOT_GRANTED\",\n  NotFound = \"NOT_FOUND\",\n  InvalidParams = \"INVALID_PARAMS\",\n}\n\n/**\n * Misc\n */\n\nexport type ThanosDAppNetwork =\n  | \"mainnet\"\n  | \"carthagenet\"\n  | \"labnet\"\n  | \"sandbox\"\n  | { name: string; rpc: string };\n\nexport interface ThanosDAppMetadata {\n  name: string;\n}\n\nexport interface ThanosPageMessage {\n  type: ThanosPageMessageType;\n  payload: any;\n  reqId?: string | number;\n}\n\nexport enum ThanosPageMessageType {\n  Request = \"THANOS_PAGE_REQUEST\",\n  Response = \"THANOS_PAGE_RESPONSE\",\n  ErrorResponse = \"THANOS_PAGE_ERROR_RESPONSE\",\n}\n","import { nanoid } from \"nanoid\";\nimport {\n  ThanosPageMessageType,\n  ThanosPageMessage,\n  ThanosDAppMessageType,\n  ThanosDAppRequest,\n  ThanosDAppResponse,\n  ThanosDAppErrorType,\n  ThanosDAppNetwork,\n  ThanosDAppMetadata,\n} from \"./types\";\n\nexport function isAvailable() {\n  return new Promise<boolean>((resolve) => {\n    const handleMessage = (evt: MessageEvent) => {\n      if (\n        evt.source === window &&\n        evt.data?.type === ThanosPageMessageType.Response &&\n        evt.data?.payload === \"PONG\"\n      ) {\n        done(true);\n      }\n    };\n\n    const done = (result: boolean) => {\n      resolve(result);\n      window.removeEventListener(\"message\", handleMessage);\n      clearTimeout(t);\n    };\n\n    send({\n      type: ThanosPageMessageType.Request,\n      payload: \"PING\",\n    });\n    window.addEventListener(\"message\", handleMessage);\n    const t = setTimeout(() => done(false), 500);\n  });\n}\n\nexport function onAvailabilityChange(callback: (available: boolean) => void) {\n  let t: any;\n  let currentStatus = false;\n  const check = async (attempt = 0) => {\n    const initial = attempt < 5;\n    const available = await isAvailable();\n    if (currentStatus !== available) {\n      callback(available);\n      currentStatus = available;\n    }\n    t = setTimeout(\n      check,\n      available ? 10_000 : !initial ? 5_000 : 0,\n      initial ? attempt + 1 : attempt\n    );\n  };\n  check();\n  return () => clearTimeout(t);\n}\n\nexport async function requestPermission(\n  network: ThanosDAppNetwork,\n  appMeta: ThanosDAppMetadata,\n  force: boolean\n) {\n  const res = await request({\n    type: ThanosDAppMessageType.PermissionRequest,\n    network,\n    appMeta,\n    force,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.PermissionResponse);\n  return { pkh: res.pkh, rpc: res.rpc };\n}\n\nexport async function requestOperation(sourcePkh: string, opParams: any) {\n  const res = await request({\n    type: ThanosDAppMessageType.OperationRequest,\n    sourcePkh,\n    opParams,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.OperationResponse);\n  return res.opHash;\n}\n\nexport async function requestSign(sourcePkh: string, payload: string) {\n  const res = await request({\n    type: ThanosDAppMessageType.SignRequest,\n    sourcePkh,\n    payload,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.SignResponse);\n  return res.signature;\n}\n\nexport async function requestBroadcast(signedOpBytes: string) {\n  const res = await request({\n    type: ThanosDAppMessageType.BroadcastRequest,\n    signedOpBytes,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.BroadcastResponse);\n  return res.opHash;\n}\n\nfunction request(payload: ThanosDAppRequest) {\n  return new Promise<ThanosDAppResponse>((resolve, reject) => {\n    const reqId = nanoid();\n    const handleMessage = (evt: MessageEvent) => {\n      const res = evt.data as ThanosPageMessage;\n      switch (true) {\n        case evt.source !== window || res?.reqId !== reqId:\n          return;\n\n        case res?.type === ThanosPageMessageType.Response:\n          resolve(res.payload);\n          window.removeEventListener(\"message\", handleMessage);\n          break;\n\n        case res?.type === ThanosPageMessageType.ErrorResponse:\n          reject(createError(res.payload));\n          window.removeEventListener(\"message\", handleMessage);\n          break;\n      }\n    };\n\n    send({\n      type: ThanosPageMessageType.Request,\n      payload,\n      reqId,\n    });\n\n    window.addEventListener(\"message\", handleMessage);\n  });\n}\n\nfunction createError(payload: any) {\n  switch (true) {\n    case payload === ThanosDAppErrorType.NotGranted:\n      return new NotGrantedThanosWalletError();\n\n    case payload === ThanosDAppErrorType.NotFound:\n      return new NotFoundThanosWalletError();\n\n    case payload === ThanosDAppErrorType.InvalidParams:\n      return new InvalidParamsThanosWalletError();\n\n    case payload?.startsWith(\"__tezos__\"):\n      return new Error(payload.replace(\"__tezos__\", \"\"));\n\n    default:\n      return new ThanosWalletError();\n  }\n}\n\nfunction assertResponse(condition: any): asserts condition {\n  if (!condition) {\n    throw new Error(\"Invalid response recieved\");\n  }\n}\n\nfunction send(msg: ThanosPageMessage) {\n  window.postMessage(msg, \"*\");\n}\n\nexport class ThanosWalletError implements Error {\n  name = \"ThanosWalletError\";\n  message = \"An unknown error occured. Please try again or report it\";\n}\n\nexport class NotGrantedThanosWalletError extends ThanosWalletError {\n  name = \"NotGrantedThanosWalletError\";\n  message = \"Permission Not Granted\";\n}\n\nexport class NotFoundThanosWalletError extends ThanosWalletError {\n  name = \"NotFoundThanosWalletError\";\n  message = \"Account Not Found. Try connect again\";\n}\n\nexport class InvalidParamsThanosWalletError extends ThanosWalletError {\n  name = \"InvalidParamsThanosWalletError\";\n  message = \"Some of the parameters you provided are invalid\";\n}\n","import {\n  TezosToolkit,\n  WalletProvider,\n  createOriginationOperation,\n  createSetDelegateOperation,\n  createTransferOperation,\n  WalletDelegateParams,\n  WalletOriginateParams,\n  WalletTransferParams,\n} from \"@taquito/taquito\";\n\nimport {\n  isAvailable,\n  onAvailabilityChange,\n  requestPermission,\n  requestOperation,\n  requestSign,\n  requestBroadcast,\n  ThanosWalletError,\n} from \"./client\";\n\nimport { ThanosDAppNetwork } from \"./types\";\n\nexport class ThanosWallet implements WalletProvider {\n  static isAvailable = isAvailable;\n  static onAvailabilityChange = onAvailabilityChange;\n\n  private pkh?: string;\n  public rpc?: string;\n\n  constructor(private appName: string) {}\n\n  get connected() {\n    return Boolean(this.pkh);\n  }\n\n  toTezos() {\n    assertConnected(this.pkh);\n    const tezos = new TezosToolkit();\n    tezos.setProvider({ wallet: this, rpc: this.rpc });\n    return tezos;\n  }\n\n  async connect(network: ThanosDAppNetwork, opts = { forcePermission: false }) {\n    const { pkh, rpc } = await requestPermission(\n      network,\n      { name: this.appName },\n      opts.forcePermission\n    );\n    this.pkh = pkh;\n    this.rpc = rpc;\n  }\n\n  async getPKH() {\n    assertConnected(this.pkh);\n    return this.pkh;\n  }\n\n  async mapTransferParamsToWalletParams(params: WalletTransferParams) {\n    return createTransferOperation(params);\n  }\n\n  async mapOriginateParamsToWalletParams(params: WalletOriginateParams) {\n    return createOriginationOperation(params as any);\n  }\n\n  async mapDelegateParamsToWalletParams(params: WalletDelegateParams) {\n    return createSetDelegateOperation(params as any);\n  }\n\n  async sendOperations(opParams: any[]) {\n    assertConnected(this.pkh);\n    return requestOperation(this.pkh, opParams.map(formatOpParams));\n  }\n\n  async sign(payload: string) {\n    assertConnected(this.pkh);\n    return requestSign(this.pkh, payload);\n  }\n\n  async broadcast(signedOpBytes: string) {\n    assertConnected(this.pkh);\n    return requestBroadcast(signedOpBytes);\n  }\n}\n\nexport class NotConnectedThanosWalletError extends ThanosWalletError {\n  name = \"ThanosWalletNotConnected\";\n  message =\n    \"You need to connect ThanosWallet by calling thanosWallet.connect() first\";\n}\n\nfunction assertConnected(pkh?: string): asserts pkh {\n  if (!pkh) {\n    throw new NotConnectedThanosWalletError();\n  }\n}\n\nfunction formatOpParams(op: any) {\n  const { fee, gas_limit, storage_limit, ...rest } = op;\n  if (op.kind === \"transaction\") {\n    const { destination, amount, parameters, ...txRest } = rest;\n    return {\n      ...txRest,\n      to: destination,\n      amount: +amount,\n      mutez: true,\n      parameter: parameters,\n    };\n  }\n  return rest;\n}\n"],"names":["ThanosDAppMessageType","ThanosDAppErrorType","ThanosPageMessageType","requestBroadcast","signedOpBytes","request","type","BroadcastRequest","res","assertResponse","BroadcastResponse","opHash","requestSign","sourcePkh","payload","SignRequest","SignResponse","signature","requestOperation","opParams","OperationRequest","OperationResponse","requestPermission","network","appMeta","force","PermissionRequest","PermissionResponse","pkh","rpc","isAvailable","Promise","resolve","handleMessage","evt","source","window","data","Response","done","result","removeEventListener","clearTimeout","t","send","Request","addEventListener","setTimeout","onAvailabilityChange","callback","currentStatus","check","attempt","initial","available","reject","reqId","nanoid","ErrorResponse","NotGranted","NotGrantedThanosWalletError","NotFound","NotFoundThanosWalletError","InvalidParams","InvalidParamsThanosWalletError","startsWith","Error","replace","ThanosWalletError","createError","condition","msg","postMessage","this","_this","_this2","_this3","ThanosWallet","appName","toTezos","assertConnected","tezos","TezosToolkit","setProvider","wallet","connect","opts","forcePermission","name","getPKH","mapTransferParamsToWalletParams","params","createTransferOperation","mapOriginateParamsToWalletParams","createOriginationOperation","mapDelegateParamsToWalletParams","createSetDelegateOperation","sendOperations","map","formatOpParams","sign","broadcast","Boolean","NotConnectedThanosWalletError","_this11","op","fee","rest","kind","destination","amount","parameters","to","mutez","parameter"],"mappings":"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"}