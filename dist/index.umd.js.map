{"version":3,"file":"index.umd.js","sources":["../src/types.ts","../src/client.ts"],"sourcesContent":["export type ThanosDAppMessage = ThanosDAppRequest | ThanosDAppResponse;\n\nexport type ThanosDAppRequest =\n  | ThanosDAppPermissionRequest\n  | ThanosDAppOperationRequest;\n\nexport type ThanosDAppResponse =\n  | ThanosDAppPermissionResponse\n  | ThanosDAppOperationResponse;\n\nexport interface ThanosDAppMessageBase {\n  type: ThanosDAppMessageType;\n}\n\nexport enum ThanosDAppMessageType {\n  PermissionRequest = \"PERMISSION_REQUEST\",\n  PermissionResponse = \"PERMISSION_RESPONSE\",\n  OperationRequest = \"OPERATION_REQUEST\",\n  OperationResponse = \"OPERATION_RESPONSE\",\n}\n\n/**\n * Messages\n */\n\nexport interface ThanosDAppPermissionRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.PermissionRequest;\n  network: ThanosDAppNetwork;\n  appMeta: ThanosDAppMetadata;\n  force?: boolean;\n}\n\nexport interface ThanosDAppPermissionResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.PermissionResponse;\n  pkh: string;\n  rpc: string;\n}\n\nexport interface ThanosDAppOperationRequest extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.OperationRequest;\n  sourcePkh: string;\n  opParams: any[];\n}\n\nexport interface ThanosDAppOperationResponse extends ThanosDAppMessageBase {\n  type: ThanosDAppMessageType.OperationResponse;\n  opHash: string;\n}\n\n/**\n * Errors\n */\nexport enum ThanosDAppErrorType {\n  NotGranted = \"NOT_GRANTED\",\n  NotFound = \"NOT_FOUND\",\n  InvalidParams = \"INVALID_PARAMS\",\n}\n\n/**\n * Misc\n */\n\nexport type ThanosDAppNetwork = \"mainnet\" | \"carthagenet\";\n\nexport interface ThanosDAppMetadata {\n  name: string;\n}\n\nexport interface ThanosPageMessage {\n  type: ThanosPageMessageType;\n  payload: any;\n  reqId?: string | number;\n}\n\nexport enum ThanosPageMessageType {\n  Request = \"THANOS_PAGE_REQUEST\",\n  Response = \"THANOS_PAGE_RESPONSE\",\n  ErrorResponse = \"THANOS_PAGE_ERROR_RESPONSE\",\n}\n","import { nanoid } from \"nanoid\";\nimport {\n  ThanosPageMessageType,\n  ThanosPageMessage,\n  ThanosDAppMessageType,\n  ThanosDAppRequest,\n  ThanosDAppResponse,\n  ThanosDAppErrorType,\n  ThanosDAppNetwork,\n  ThanosDAppMetadata,\n} from \"./types\";\n\nexport function isAvailable() {\n  return new Promise<boolean>((resolve) => {\n    const handleMessage = (evt: MessageEvent) => {\n      if (\n        evt.source === window &&\n        evt.data?.type === ThanosPageMessageType.Response &&\n        evt.data?.payload === \"PONG\"\n      ) {\n        done(true);\n      }\n    };\n\n    const done = (result: boolean) => {\n      resolve(result);\n      window.removeEventListener(\"message\", handleMessage);\n      clearTimeout(t);\n    };\n\n    send({\n      type: ThanosPageMessageType.Request,\n      payload: \"PING\",\n    });\n    window.addEventListener(\"message\", handleMessage);\n    const t = setTimeout(() => done(false), 100);\n  });\n}\n\nexport function onAvailabilityChange(callback: (available: boolean) => void) {\n  let t: any;\n  let currentStatus = false;\n  const check = async (attempt = 0) => {\n    const initial = attempt < 5;\n    const available = await isAvailable();\n    if (currentStatus !== available) {\n      callback(available);\n      currentStatus = available;\n    }\n    t = setTimeout(\n      check,\n      available ? 10_000 : !initial ? 5_000 : 250,\n      initial ? attempt + 1 : attempt\n    );\n  };\n  check();\n  return () => clearTimeout(t);\n}\n\nexport async function requestPermission(\n  network: ThanosDAppNetwork,\n  appMeta: ThanosDAppMetadata,\n  force: boolean\n) {\n  const res = await request({\n    type: ThanosDAppMessageType.PermissionRequest,\n    network,\n    appMeta,\n    force,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.PermissionResponse);\n  return { pkh: res.pkh, rpc: res.rpc };\n}\n\nexport async function requestOperation(sourcePkh: string, opParams: any) {\n  const res = await request({\n    type: ThanosDAppMessageType.OperationRequest,\n    sourcePkh,\n    opParams,\n  });\n  assertResponse(res.type === ThanosDAppMessageType.OperationResponse);\n  return res.opHash;\n}\n\nfunction request(payload: ThanosDAppRequest) {\n  return new Promise<ThanosDAppResponse>((resolve, reject) => {\n    const reqId = nanoid();\n    const handleMessage = (evt: MessageEvent) => {\n      const res = evt.data as ThanosPageMessage;\n      switch (true) {\n        case evt.source !== window || res?.reqId !== reqId:\n          return;\n\n        case res?.type === ThanosPageMessageType.Response:\n          resolve(res.payload);\n          window.removeEventListener(\"message\", handleMessage);\n          break;\n\n        case res?.type === ThanosPageMessageType.ErrorResponse:\n          reject(createError(res.payload));\n          window.removeEventListener(\"message\", handleMessage);\n          break;\n      }\n    };\n\n    send({\n      type: ThanosPageMessageType.Request,\n      payload,\n      reqId,\n    });\n\n    window.addEventListener(\"message\", handleMessage);\n  });\n}\n\nfunction createError(payload: any) {\n  switch (payload) {\n    case ThanosDAppErrorType.NotGranted:\n      return new NotGrantedThanosWalletError();\n\n    case ThanosDAppErrorType.NotFound:\n      return new NotFoundThanosWalletError();\n\n    case ThanosDAppErrorType.InvalidParams:\n      return new InvalidParamsThanosWalletError();\n\n    default:\n      return new ThanosWalletError();\n  }\n}\n\nfunction assertResponse(condition: any): asserts condition {\n  if (!condition) {\n    throw new Error(\"Invalid response recieved\");\n  }\n}\n\nfunction send(msg: ThanosPageMessage) {\n  window.postMessage(msg, \"*\");\n}\n\nexport class ThanosWalletError implements Error {\n  name = \"ThanosWalletError\";\n  message = \"An unknown error occured. Please try again or report it\";\n}\n\nexport class NotConnectedThanosWalletError extends ThanosWalletError {\n  name = \"ThanosWalletNotConnected\";\n  message =\n    \"You need to connect ThanosWallet by calling thanosWallet.connect() first\";\n}\n\nexport class NotGrantedThanosWalletError extends ThanosWalletError {\n  name = \"NotGrantedThanosWalletError\";\n  message = \"Permission Not Granted\";\n}\n\nexport class NotFoundThanosWalletError extends ThanosWalletError {\n  name = \"NotFoundThanosWalletError\";\n  message = \"Account Not Found. Try connect again\";\n}\n\nexport class InvalidParamsThanosWalletError extends ThanosWalletError {\n  name = \"InvalidParamsThanosWalletError\";\n  message = \"Some of the parameters you provided are invalid\";\n}\n"],"names":["ThanosDAppMessageType","ThanosDAppErrorType","ThanosPageMessageType","isAvailable","Promise","resolve","handleMessage","evt","source","window","data","type","Response","payload","done","result","removeEventListener","clearTimeout","t","send","Request","addEventListener","setTimeout","request","reject","reqId","nanoid","res","ErrorResponse","NotGranted","NotGrantedThanosWalletError","NotFound","NotFoundThanosWalletError","InvalidParams","InvalidParamsThanosWalletError","ThanosWalletError","createError","assertResponse","condition","Error","msg","postMessage","this","NotConnectedThanosWalletError","_this","_this2","_this3","_this4","callback","currentStatus","check","attempt","initial","available","sourcePkh","opParams","OperationRequest","OperationResponse","opHash","network","appMeta","force","PermissionRequest","PermissionResponse","pkh","rpc"],"mappings":"0NAcA,IAAYA,EAsCAC,EAsBAC,0GC9DIC,IACd,WAAWC,QAAiB,SAACC,GAC3B,IAAMC,EAAgB,SAACC,WAEnBA,EAAIC,SAAWC,mBACfF,EAAIG,2BAAMC,QAAST,wBAAsBU,UACnB,oBAAtBL,EAAIG,2BAAMG,UAEVC,GAAK,IAIHA,EAAO,SAACC,GACZV,EAAQU,GACRN,OAAOO,oBAAoB,UAAWV,GACtCW,aAAaC,IAGfC,EAAK,CACHR,KAAMT,wBAAsBkB,QAC5BP,QAAS,SAEXJ,OAAOY,iBAAiB,UAAWf,GACnC,IAAMY,EAAII,WAAW,kBAAMR,GAAK,IAAQ,OAiD5C,SAASS,EAAQV,GACf,WAAWT,QAA4B,SAACC,EAASmB,GAC/C,IAAMC,EAAQC,WAmBdP,EAAK,CACHR,KAAMT,wBAAsBkB,QAC5BP,QAAAA,EACAY,MAAAA,IAGFhB,OAAOY,iBAAiB,UAxBF,SAAhBf,EAAiBC,GACrB,IAAMoB,EAAMpB,EAAIG,KAChB,QAAQ,GACN,KAAKH,EAAIC,SAAWC,SAAUkB,MAAAA,SAAAA,EAAKF,SAAUA,EAC3C,OAEF,KAAKE,MAAAA,SAAAA,EAAKhB,QAAST,wBAAsBU,SACvCP,EAAQsB,EAAId,SACZJ,OAAOO,oBAAoB,UAAWV,GACtC,MAEF,KAAKqB,MAAAA,SAAAA,EAAKhB,QAAST,wBAAsB0B,cACvCJ,EAgBV,SAAqBX,GACnB,OAAQA,GACN,KAAKZ,sBAAoB4B,WACvB,WAAWC,EAEb,KAAK7B,sBAAoB8B,SACvB,WAAWC,EAEb,KAAK/B,sBAAoBgC,cACvB,WAAWC,EAEb,QACE,WAAWC,GA5BAC,CAAYT,EAAId,UACvBJ,OAAOO,oBAAoB,UAAWV,QA+BhD,SAAS+B,EAAeC,GACtB,IAAKA,EACH,UAAUC,MAAM,6BAIpB,SAASpB,EAAKqB,GACZ/B,OAAOgC,YAAYD,EAAK,MD5HdxC,EAAAA,0BAAAA,oEAEVA,2CACAA,uCACAA,0CAkCUC,EAAAA,wBAAAA,oDAEVA,uBACAA,kCAmBUC,EAAAA,0BAAAA,2DAEVA,kCACAA,6CCgEWiC,IAAAA,EAAb,WACEO,UAAO,oBACPA,aAAU,2DAGCC,cAAb,gEACS,2BACPC,UACE,6EAHJ,iBAAmDT,GAMtCL,cAAb,gEACS,8BACPe,UAAU,2BAFZ,iBAAiDV,GAKpCH,cAAb,gEACS,4BACPc,UAAU,yCAFZ,iBAA+CX,GAKlCD,cAAb,gEACS,iCACPa,UAAU,oDAFZ,iBAAoDZ,mMA3HpD,SAAqCa,GACnC,IAAI9B,EACA+B,GAAgB,EAepB,gBAdMC,EAAeC,YAAAA,IAAAA,EAAU,OAC7B,IAAMC,EAAUD,EAAU,yBACFhD,mBAAlBkD,GACFJ,IAAkBI,IACpBL,EAASK,GACTJ,EAAgBI,GAElBnC,EAAII,WACF4B,EACAG,EAAY,IAAUD,EAAkB,IAAR,IAChCA,EAAUD,EAAU,EAAIA,KAVjB,mCAaXD,qBACajC,aAAaC,iCAkBWoC,EAAmBC,8BACtChC,EAAQ,CACxBZ,KAAMX,wBAAsBwD,iBAC5BF,UAAAA,EACAC,SAAAA,mBAHI5B,GAMN,OADAU,EAAeV,EAAIhB,OAASX,wBAAsByD,mBAC3C9B,EAAI+B,SAPb,iEAdEC,EACAC,EACAC,8BAEkBtC,EAAQ,CACxBZ,KAAMX,wBAAsB8D,kBAC5BH,QAAAA,EACAC,QAAAA,EACAC,MAAAA,mBAJIlC,GAON,OADAU,EAAeV,EAAIhB,OAASX,wBAAsB+D,oBAC3C,CAAEC,IAAKrC,EAAIqC,IAAKC,IAAKtC,EAAIsC,OAZlC"}